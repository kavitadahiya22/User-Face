// Penetration Testing Type Definitions
export interface PlanRequest {
  targets: string[];
  depth: 'quick' | 'standard' | 'deep';
  features: string[];
  simulate: boolean;
  tenant_id: string;
}

export interface Step {
  id: string;
  agent: string;
  tool: string;
  params: Record<string, any>;
  status?: 'pending' | 'running' | 'completed' | 'failed';
  startTime?: string;
  endTime?: string;
  output?: string;
}

export interface PlanResponse {
  plan_id: string;
  steps: Step[];
  notes: string;
  estimated_duration?: number;
  risk_level?: 'low' | 'medium' | 'high';
  safety_warnings?: string[];
}

export interface RunRequest {
  tenant_id: string;
  inputs: {
    targets: string[];
    depth: 'quick' | 'standard' | 'deep';
    features: string[];
    simulate: boolean;
  };
  plan_id?: string;
}

export interface RunResponse {
  run_id: string;
  status: 'accepted' | 'running' | 'completed' | 'failed';
  plan_id: string;
  message?: string;
  estimated_completion?: string;
}

export interface RunStatusResponse {
  run_id: string;
  status: 'running' | 'completed' | 'failed' | 'cancelled';
  progress: {
    current_step: number;
    total_steps: number;
    percentage: number;
    step_name: string;
  };
  started_at: string;
  completed_at?: string;
  results_summary?: {
    vulnerabilities_found: number;
    high_severity: number;
    medium_severity: number;
    low_severity: number;
    critical_severity: number;
  };
  artifacts: Array<{
    id: string;
    type: 'report' | 'scan_data' | 'exploit_proof';
    filename: string;
    url: string;
    size?: number;
    created_at?: string;
  }>;
}

export interface ScanConfig {
  depth: 'quick' | 'standard' | 'deep';
  features: string[];
  simulate: boolean;
  scheduling?: {
    start_time: string;
    max_duration: number;
    business_hours_only: boolean;
  };
  constraints?: {
    exclude_destructive?: boolean;
    rate_limiting?: boolean;
    stealth_mode?: boolean;
  };
}

export interface Feature {
  id: string;
  name: string;
  description: string;
  category: string;
  risk_level: 'low' | 'medium' | 'high';
  dependencies?: string[];
  estimated_time?: number;
  destructive?: boolean;
}

export interface Vulnerability {
  id: string;
  title: string;
  description: string;
  severity: 'critical' | 'high' | 'medium' | 'low' | 'info';
  cvss_score?: number;
  cvss_vector?: string;
  cve_id?: string;
  target: string;
  port?: number;
  service?: string;
  proof_of_concept?: string;
  remediation?: string;
  references?: string[];
  discovered_at: string;
}

export interface Agent {
  name: string;
  description: string;
  tools: string[];
  status?: 'idle' | 'active' | 'completed' | 'error';
}

export interface Tool {
  name: string;
  category: string;
  description: string;
  params: Record<string, any>;
  risk_level?: 'low' | 'medium' | 'high';
}

export interface CatalogResponse {
  agents: Agent[];
  tools: Tool[];
}

export interface ApiError {
  code: string;
  message: string;
  details?: Record<string, any>;
  field_errors?: Record<string, string[]>;
}

export interface RunResults {
  summary: {
    total_vulnerabilities: number;
    by_severity: Record<string, number>;
    total_targets: number;
    scan_duration: number;
    tools_used: string[];
  };
  findings: Vulnerability[];
  artifacts: Array<{
    id: string;
    type: string;
    filename: string;
    url: string;
    size: number;
  }>;
  timeline: Array<{
    timestamp: string;
    event: string;
    agent: string;
    tool?: string;
    details?: string;
  }>;
  recommendations: Array<{
    priority: 'critical' | 'high' | 'medium' | 'low';
    title: string;
    description: string;
    remediation_steps: string[];
  }>;
}

export type WorkflowStep = 'config' | 'plan' | 'execute' | 'results';

export interface PentestWorkflowState {
  currentStep: WorkflowStep;
  targets: string[];
  scanConfig?: ScanConfig;
  plan?: PlanResponse;
  runId?: string;
  results?: RunResults;
  isLoading: boolean;
  error?: string;
}