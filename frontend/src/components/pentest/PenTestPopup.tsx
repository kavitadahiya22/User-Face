import React, { useState, useCallback } from 'react';
import { Shield, CheckCircle, XCircle, Clock, AlertTriangle, FileText, Download } from 'lucide-react';
import Modal from '../ui/modal';
import CompanyDetailsForm from './CompanyDetailsForm';
import azurePenTestService, { PenTestJob, PenTestResult, PenTestRequest } from '../../services/azurePenTestService';

interface PenTestPopupProps {
  isOpen: boolean;
  onClose: () => void;
}

type PopupStep = 'form' | 'launching' | 'running' | 'results' | 'error';

const PenTestPopup: React.FC<PenTestPopupProps> = ({ isOpen, onClose }) => {
  const [currentStep, setCurrentStep] = useState<PopupStep>('form');
  const [jobData, setJobData] = useState<PenTestJob | null>(null);
  const [results, setResults] = useState<PenTestResult | null>(null);
  const [error, setError] = useState<string | null>(null);
  const [progress, setProgress] = useState(0);

  const resetState = useCallback(() => {
    setCurrentStep('form');
    setJobData(null);
    setResults(null);
    setError(null);
    setProgress(0);
  }, []);

  const handleClose = useCallback(() => {
    resetState();
    onClose();
  }, [resetState, onClose]);

  const handleFormSubmit = async (formData: PenTestRequest) => {
    setCurrentStep('launching');
    setError(null);

    try {
      // Launch the penetration test
      const job = await azurePenTestService.launchPenTest(formData);
      setJobData(job);
      setCurrentStep('running');

      // Poll for job completion
      await azurePenTestService.pollJobStatus(job.id, (updatedJob) => {
        setJobData(updatedJob);
        setProgress(updatedJob.progress || 0);
      });

      // Get results when job is completed
      const testResults = await azurePenTestService.getPenTestResults(job.id);
      setResults(testResults);
      setCurrentStep('results');
    } catch (err) {
      setError(err instanceof Error ? err.message : 'An unexpected error occurred');
      setCurrentStep('error');
    }
  };

  const handleDownloadReport = () => {
    if (results?.reportUrl) {
      window.open(results.reportUrl, '_blank');
    }
  };

  const renderStepContent = () => {
    switch (currentStep) {
      case 'form':
        return (
          <CompanyDetailsForm
            onSubmit={handleFormSubmit}
            isLoading={false}
          />
        );

      case 'launching':
        return (
          <div className="flex flex-col items-center justify-center py-12 space-y-4">
            <div className="animate-spin rounded-full h-16 w-16 border-b-2 border-blue-600"></div>
            <h3 className="text-lg font-semibold text-gray-900">Launching Security Scan</h3>
            <p className="text-gray-600 text-center">
              Initializing penetration testing environment and preparing scan modules...
            </p>
          </div>
        );

      case 'running':
        return (
          <div className="space-y-6">
            <div className="flex items-center space-x-3">
              <Clock className="w-6 h-6 text-blue-600 animate-pulse" />
              <h3 className="text-lg font-semibold text-gray-900">Security Scan in Progress</h3>
            </div>

            <div className="space-y-4">
              <div className="flex justify-between items-center">
                <span className="text-sm font-medium text-gray-700">Progress</span>
                <span className="text-sm text-gray-600">{progress}%</span>
              </div>
              
              <div className="w-full bg-gray-200 rounded-full h-3">
                <div 
                  className={`progress-bar progress-bar-${Math.round(progress / 5) * 5}`}
                ></div>
              </div>

              {jobData && (
                <div className="bg-gray-50 border border-gray-200 rounded-lg p-4">
                  <div className="space-y-2">
                    <div className="flex justify-between">
                      <span className="text-sm text-gray-600">Job ID:</span>
                      <span className="text-sm font-mono text-gray-900">{jobData.id}</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-sm text-gray-600">Status:</span>
                      <span className={`text-sm font-medium ${
                        jobData.status === 'running' ? 'text-blue-600' : 
                        jobData.status === 'pending' ? 'text-yellow-600' : 'text-gray-900'
                      }`}>
                        {jobData.status.charAt(0).toUpperCase() + jobData.status.slice(1)}
                      </span>
                    </div>
                    {jobData.startTime && (
                      <div className="flex justify-between">
                        <span className="text-sm text-gray-600">Started:</span>
                        <span className="text-sm text-gray-900">
                          {new Date(jobData.startTime).toLocaleString()}
                        </span>
                      </div>
                    )}
                    {jobData.message && (
                      <div className="mt-3 p-3 bg-blue-50 rounded-md">
                        <p className="text-sm text-gray-800">{jobData.message}</p>
                      </div>
                    )}
                  </div>
                </div>
              )}

              <div className="bg-blue-50 border border-blue-200 rounded-md p-4">
                <div className="flex items-start space-x-2">
                  <Shield className="w-5 h-5 text-blue-600 mt-0.5 flex-shrink-0" />
                  <div className="text-sm text-gray-800">
                    <p className="font-medium mb-1">Scanning in Progress</p>
                    <p className="text-gray-600">
                      The penetration testing suite is actively scanning your systems. This process may take several minutes depending on the scope of testing selected.
                    </p>
                  </div>
                </div>
              </div>
            </div>
          </div>
        );

      case 'results':
        return (
          <div className="space-y-6">
            <div className="flex items-center space-x-3">
              <CheckCircle className="w-6 h-6 text-green-600" />
              <h3 className="text-lg font-semibold text-gray-900">Security Scan Complete</h3>
            </div>

            {results && (
              <>
                <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                  <div className="bg-red-50 border border-red-200 rounded-lg p-4 text-center">
                    <div className="text-2xl font-bold text-red-600">{results.summary.criticalVulnerabilities}</div>
                    <div className="text-sm text-gray-600">Critical</div>
                  </div>
                  <div className="bg-orange-50 border border-orange-200 rounded-lg p-4 text-center">
                    <div className="text-2xl font-bold text-orange-600">{results.summary.highVulnerabilities}</div>
                    <div className="text-sm text-gray-600">High</div>
                  </div>
                  <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-4 text-center">
                    <div className="text-2xl font-bold text-yellow-600">{results.summary.mediumVulnerabilities}</div>
                    <div className="text-sm text-gray-600">Medium</div>
                  </div>
                  <div className="bg-blue-50 border border-blue-200 rounded-lg p-4 text-center">
                    <div className="text-2xl font-bold text-blue-600">{results.summary.lowVulnerabilities}</div>
                    <div className="text-sm text-gray-600">Low</div>
                  </div>
                </div>

                <div className="bg-gray-50 border border-gray-200 rounded-lg p-4">
                  <h4 className="font-semibold text-gray-900 mb-3 flex items-center">
                    <FileText className="w-4 h-4 mr-2" />
                    Scan Summary
                  </h4>
                  <div className="space-y-2 text-sm">
                    <div className="flex justify-between">
                      <span className="text-gray-600">Total Vulnerabilities Found:</span>
                      <span className="text-gray-900 font-medium">{results.summary.totalVulnerabilities}</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-gray-600">Scan Completed:</span>
                      <span className="text-gray-900">{new Date(results.generatedAt).toLocaleString()}</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-gray-600">Report ID:</span>
                      <span className="text-gray-900 font-mono">{results.id}</span>
                    </div>
                  </div>
                </div>

                {results.findings.length > 0 && (
                  <div className="space-y-3">
                    <h4 className="font-semibold text-gray-900">Top Critical Findings</h4>
                    <div className="space-y-2 max-h-60 overflow-y-auto">
                      {results.findings
                        .filter(finding => finding.severity === 'critical' || finding.severity === 'high')
                        .slice(0, 5)
                        .map((finding) => (
                        <div key={finding.id} className="bg-white border border-gray-200 rounded-lg p-3">
                          <div className="flex items-start justify-between">
                            <div className="flex-1">
                              <div className="flex items-center space-x-2">
                                <span className={`px-2 py-1 text-xs font-medium rounded ${
                                  finding.severity === 'critical' ? 'bg-red-100 text-red-800' :
                                  finding.severity === 'high' ? 'bg-orange-100 text-orange-800' :
                                  finding.severity === 'medium' ? 'bg-yellow-100 text-yellow-800' :
                                  'bg-blue-100 text-blue-800'
                                }`}>
                                  {finding.severity.toUpperCase()}
                                </span>
                                {finding.cvssScore && (
                                  <span className="text-xs text-gray-500">
                                    CVSS: {finding.cvssScore}
                                  </span>
                                )}
                              </div>
                              <h5 className="font-medium text-gray-900 mt-1">{finding.title}</h5>
                              <p className="text-sm text-gray-600 mt-1 line-clamp-2">{finding.description}</p>
                            </div>
                          </div>
                        </div>
                      ))}
                    </div>
                  </div>
                )}

                <div className="flex space-x-3">
                  <button
                    onClick={handleDownloadReport}
                    className="flex-1 px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white font-medium rounded-md transition-colors flex items-center justify-center space-x-2"
                    disabled={!results.reportUrl}
                  >
                    <Download className="w-4 h-4" />
                    <span>Download Full Report</span>
                  </button>
                  
                  <button
                    onClick={handleClose}
                    className="px-6 py-2 bg-gray-100 hover:bg-gray-200 border border-gray-300 text-gray-700 font-medium rounded-md transition-colors"
                  >
                    Close
                  </button>
                </div>
              </>
            )}
          </div>
        );

      case 'error':
        return (
          <div className="space-y-6">
            <div className="flex items-center space-x-3">
              <XCircle className="w-6 h-6 text-red-600" />
              <h3 className="text-lg font-semibold text-gray-900">Scan Failed</h3>
            </div>

            <div className="bg-red-50 border border-red-200 rounded-lg p-4">
              <div className="flex items-start space-x-2">
                <AlertTriangle className="w-5 h-5 text-red-600 mt-0.5 flex-shrink-0" />
                <div className="text-sm text-gray-800">
                  <p className="font-medium mb-1">Error Details:</p>
                  <p className="text-gray-600">{error}</p>
                </div>
              </div>
            </div>

            <div className="flex space-x-3">
              <button
                onClick={() => setCurrentStep('form')}
                className="flex-1 px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white font-medium rounded-md transition-colors"
              >
                Try Again
              </button>
              
              <button
                onClick={handleClose}
                className="px-6 py-2 bg-gray-100 hover:bg-gray-200 border border-gray-300 text-gray-700 font-medium rounded-md transition-colors"
              >
                Close
              </button>
            </div>
          </div>
        );

      default:
        return null;
    }
  };

  const getModalTitle = () => {
    switch (currentStep) {
      case 'form':
        return 'Launch Penetration Test';
      case 'launching':
        return 'Launching Security Scan';
      case 'running':
        return 'Security Scan in Progress';
      case 'results':
        return 'Security Scan Results';
      case 'error':
        return 'Security Scan Failed';
      default:
        return 'Penetration Testing';
    }
  };

  return (
    <Modal
      isOpen={isOpen}
      onClose={currentStep === 'running' ? () => {} : handleClose}
      title={getModalTitle()}
      size="xl"
    >
      {renderStepContent()}
    </Modal>
  );
};

export default PenTestPopup;