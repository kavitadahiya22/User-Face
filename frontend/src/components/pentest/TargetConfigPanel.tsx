import React, { useState, useCallback, useMemo } from 'react';
import { CybrtyApiService } from '../../services/pentestApi';

interface TargetConfigPanelProps {
  onTargetsChange: (targets: string[]) => void;
  onValidation: (isValid: boolean, errors: string[]) => void;
  allowedFormats: Array<'ip' | 'domain' | 'url' | 'cidr'>;
  initialTargets?: string[];
}

interface TargetValidation {
  target: string;
  type: 'ip' | 'domain' | 'url' | 'cidr' | 'unknown';
  isValid: boolean;
  error?: string;
}

const TargetConfigPanel: React.FC<TargetConfigPanelProps> = ({
  onTargetsChange,
  onValidation,
  allowedFormats = ['ip', 'domain', 'url', 'cidr'],
  initialTargets = []
}) => {
  const [targetsInput, setTargetsInput] = useState<string>(initialTargets.join('\n'));
  const [validations, setValidations] = useState<TargetValidation[]>([]);
  const [isDragOver, setIsDragOver] = useState(false);
  const [isImporting, setIsImporting] = useState(false);

  // Parse and validate targets
  const parseTargets = useCallback((input: string): TargetValidation[] => {
    const lines = input.split('\n').map(line => line.trim()).filter(line => line.length > 0);
    
    return lines.map(target => {
      const validation = CybrtyApiService.validateTarget(target);
      const isAllowedType = validation.type !== 'unknown' && allowedFormats.includes(validation.type as any);
      return {
        target,
        type: validation.type,
        isValid: validation.isValid && isAllowedType,
        error: validation.isValid && !isAllowedType 
          ? `${validation.type.toUpperCase()} format not allowed`
          : validation.error
      };
    });
  }, [allowedFormats]);

  // Update validations when input changes
  const handleTargetsChange = useCallback((input: string) => {
    setTargetsInput(input);
    const newValidations = parseTargets(input);
    setValidations(newValidations);

    const validTargets = newValidations.filter(v => v.isValid).map(v => v.target);
    const errors = newValidations.filter(v => !v.isValid).map(v => v.error || 'Invalid target');

    onTargetsChange(validTargets);
    onValidation(validTargets.length > 0 && errors.length === 0, errors);
  }, [parseTargets, onTargetsChange, onValidation]);

  // Statistics
  const stats = useMemo(() => {
    const total = validations.length;
    const valid = validations.filter(v => v.isValid).length;
    const invalid = total - valid;
    
    const typeCount = validations.reduce((acc, v) => {
      if (v.isValid) {
        acc[v.type] = (acc[v.type] || 0) + 1;
      }
      return acc;
    }, {} as Record<string, number>);

    return { total, valid, invalid, typeCount };
  }, [validations]);

  // File upload handler
  const handleFileUpload = useCallback(async (file: File) => {
    setIsImporting(true);
    try {
      const text = await file.text();
      let targets: string[] = [];

      if (file.name.endsWith('.csv')) {
        // Parse CSV - assumes targets in first column
        const lines = text.split('\n');
        targets = lines.map(line => line.split(',')[0].trim()).filter(t => t);
      } else {
        // Plain text - one target per line
        targets = text.split('\n').map(line => line.trim()).filter(t => t);
      }

      const newInput = targetsInput ? `${targetsInput}\n${targets.join('\n')}` : targets.join('\n');
      handleTargetsChange(newInput);
    } catch (error) {
      console.error('Failed to import file:', error);
    } finally {
      setIsImporting(false);
    }
  }, [targetsInput, handleTargetsChange]);

  // Drag and drop handlers
  const handleDragOver = useCallback((e: React.DragEvent) => {
    e.preventDefault();
    setIsDragOver(true);
  }, []);

  const handleDragLeave = useCallback((e: React.DragEvent) => {
    e.preventDefault();
    setIsDragOver(false);
  }, []);

  const handleDrop = useCallback((e: React.DragEvent) => {
    e.preventDefault();
    setIsDragOver(false);
    
    const files = Array.from(e.dataTransfer.files);
    if (files.length > 0) {
      handleFileUpload(files[0]);
    }
  }, [handleFileUpload]);

  // Clear all targets
  const handleClear = useCallback(() => {
    handleTargetsChange('');
  }, [handleTargetsChange]);

  // Add example targets
  const addExamples = useCallback(() => {
    const examples = [
      '192.168.1.1',
      '10.0.0.0/24',
      'example.com',
      'https://app.example.com'
    ].filter(example => {
      const validation = CybrtyApiService.validateTarget(example);
      return validation.type !== 'unknown' && allowedFormats.includes(validation.type as any);
    });

    const newInput = targetsInput ? `${targetsInput}\n${examples.join('\n')}` : examples.join('\n');
    handleTargetsChange(newInput);
  }, [targetsInput, allowedFormats, handleTargetsChange]);

  return (
    <div className="target-config-panel">
      <div className="panel-header">
        <h3 className="panel-title">
          <i className="fas fa-bullseye panel-icon"></i>
          Target Configuration
        </h3>
        <p className="panel-description">
          Define your testing targets. Supports IP addresses, CIDR ranges, domain names, and URLs.
        </p>
      </div>

      {/* Input Area */}
      <div className="input-section">
        <div className="input-header">
          <label htmlFor="targets-input" className="input-label">
            Testing Targets
            <span className="required">*</span>
          </label>
          <div className="input-actions">
            <button
              type="button"
              onClick={addExamples}
              className="btn-secondary btn-sm"
              title="Add example targets"
            >
              <i className="fas fa-plus"></i>
              Examples
            </button>
            <button
              type="button"
              onClick={handleClear}
              className="btn-secondary btn-sm"
              title="Clear all targets"
              disabled={!targetsInput}
            >
              <i className="fas fa-trash"></i>
              Clear
            </button>
          </div>
        </div>

        <div 
          className={`input-container ${isDragOver ? 'drag-over' : ''}`}
          onDragOver={handleDragOver}
          onDragLeave={handleDragLeave}
          onDrop={handleDrop}
        >
          <textarea
            id="targets-input"
            value={targetsInput}
            onChange={(e) => handleTargetsChange(e.target.value)}
            placeholder="Enter targets (one per line):&#10;192.168.1.100&#10;10.0.0.0/24&#10;example.com&#10;https://app.example.com"
            rows={8}
            className="targets-textarea"
          />
          
          {isDragOver && (
            <div className="drag-overlay">
              <i className="fas fa-cloud-upload-alt drag-icon"></i>
              <p>Drop file to import targets</p>
            </div>
          )}
        </div>

        {/* File Import */}
        <div className="import-section">
          <input
            type="file"
            id="file-import"
            accept=".txt,.csv"
            onChange={(e) => {
              const file = e.target.files?.[0];
              if (file) handleFileUpload(file);
            }}
            style={{ display: 'none' }}
          />
          <label htmlFor="file-import" className="file-import-btn">
            <i className="fas fa-upload"></i>
            {isImporting ? 'Importing...' : 'Import from file'}
          </label>
          <span className="file-hint">Supports .txt and .csv files</span>
        </div>
      </div>

      {/* Statistics */}
      {validations.length > 0 && (
        <div className="stats-section">
          <div className="stats-grid">
            <div className="stat-item">
              <span className="stat-value">{stats.total}</span>
              <span className="stat-label">Total Targets</span>
            </div>
            <div className="stat-item stat-success">
              <span className="stat-value">{stats.valid}</span>
              <span className="stat-label">Valid</span>
            </div>
            {stats.invalid > 0 && (
              <div className="stat-item stat-error">
                <span className="stat-value">{stats.invalid}</span>
                <span className="stat-label">Invalid</span>
              </div>
            )}
          </div>

          {/* Type breakdown */}
          {Object.keys(stats.typeCount).length > 0 && (
            <div className="type-breakdown">
              <span className="breakdown-label">Target Types:</span>
              {Object.entries(stats.typeCount).map(([type, count]) => (
                <span key={type} className={`type-badge type-${type}`}>
                  {type.toUpperCase()}: {count}
                </span>
              ))}
            </div>
          )}
        </div>
      )}

      {/* Validation Results */}
      {validations.length > 0 && (
        <div className="validation-section">
          <h4 className="validation-title">Target Validation</h4>
          <div className="validation-list">
            {validations.map((validation, index) => (
              <div
                key={index}
                className={`validation-item ${validation.isValid ? 'valid' : 'invalid'}`}
              >
                <div className="validation-content">
                  <span className="target-text">{validation.target}</span>
                  <span className={`type-badge type-${validation.type}`}>
                    {validation.type.toUpperCase()}
                  </span>
                </div>
                <div className="validation-status">
                  {validation.isValid ? (
                    <i className="fas fa-check-circle status-icon status-success"></i>
                  ) : (
                    <div className="error-info">
                      <i className="fas fa-exclamation-circle status-icon status-error"></i>
                      <span className="error-message">{validation.error}</span>
                    </div>
                  )}
                </div>
              </div>
            ))}
          </div>
        </div>
      )}

      {/* Allowed Formats Info */}
      <div className="formats-info">
        <h4 className="formats-title">Supported Target Formats</h4>
        <div className="formats-grid">
          {allowedFormats.includes('ip') && (
            <div className="format-item">
              <i className="fas fa-server format-icon"></i>
              <span className="format-name">IP Address</span>
              <span className="format-example">192.168.1.100</span>
            </div>
          )}
          {allowedFormats.includes('cidr') && (
            <div className="format-item">
              <i className="fas fa-network-wired format-icon"></i>
              <span className="format-name">CIDR Range</span>
              <span className="format-example">10.0.0.0/24</span>
            </div>
          )}
          {allowedFormats.includes('domain') && (
            <div className="format-item">
              <i className="fas fa-globe format-icon"></i>
              <span className="format-name">Domain</span>
              <span className="format-example">example.com</span>
            </div>
          )}
          {allowedFormats.includes('url') && (
            <div className="format-item">
              <i className="fas fa-link format-icon"></i>
              <span className="format-name">URL</span>
              <span className="format-example">https://app.example.com</span>
            </div>
          )}
        </div>
      </div>

      <style>{`
        .target-config-panel {
          background: var(--card-bg);
          border-radius: 16px;
          padding: 2rem;
          box-shadow: var(--shadow-lg);
          border: 1px solid var(--border-color);
        }

        .panel-header {
          margin-bottom: 2rem;
        }

        .panel-title {
          display: flex;
          align-items: center;
          gap: 0.75rem;
          font-size: 1.5rem;
          font-weight: 700;
          color: var(--text-primary);
          margin-bottom: 0.5rem;
        }

        .panel-icon {
          color: var(--accent-primary);
          font-size: 1.25rem;
        }

        .panel-description {
          color: var(--text-secondary);
          font-size: 0.95rem;
          line-height: 1.5;
        }

        .input-section {
          margin-bottom: 2rem;
        }

        .input-header {
          display: flex;
          justify-content: space-between;
          align-items: center;
          margin-bottom: 1rem;
        }

        .input-label {
          font-weight: 600;
          color: var(--text-primary);
          font-size: 1rem;
        }

        .required {
          color: var(--accent-danger);
          margin-left: 0.25rem;
        }

        .input-actions {
          display: flex;
          gap: 0.5rem;
        }

        .btn-sm {
          padding: 0.5rem 1rem;
          font-size: 0.875rem;
        }

        .input-container {
          position: relative;
          border: 2px dashed var(--border-color);
          border-radius: 12px;
          transition: all 0.3s ease;
        }

        .input-container.drag-over {
          border-color: var(--accent-primary);
          background: rgba(37, 99, 235, 0.05);
        }

        .targets-textarea {
          width: 100%;
          min-height: 200px;
          padding: 1rem;
          border: none;
          border-radius: 12px;
          background: var(--primary-bg);
          color: var(--text-primary);
          font-family: 'JetBrains Mono', monospace;
          font-size: 0.9rem;
          line-height: 1.5;
          resize: vertical;
        }

        .targets-textarea:focus {
          outline: none;
          background: var(--secondary-bg);
        }

        .drag-overlay {
          position: absolute;
          top: 0;
          left: 0;
          right: 0;
          bottom: 0;
          background: rgba(37, 99, 235, 0.1);
          border-radius: 12px;
          display: flex;
          flex-direction: column;
          align-items: center;
          justify-content: center;
          color: var(--accent-primary);
          font-weight: 600;
        }

        .drag-icon {
          font-size: 2rem;
          margin-bottom: 0.5rem;
        }

        .import-section {
          display: flex;
          align-items: center;
          gap: 1rem;
          margin-top: 1rem;
        }

        .file-import-btn {
          display: inline-flex;
          align-items: center;
          gap: 0.5rem;
          padding: 0.75rem 1.5rem;
          background: var(--accent-secondary);
          color: white;
          border-radius: 8px;
          cursor: pointer;
          font-weight: 500;
          transition: all 0.3s ease;
        }

        .file-import-btn:hover {
          background: var(--accent-primary);
          transform: translateY(-1px);
        }

        .file-hint {
          color: var(--text-muted);
          font-size: 0.875rem;
        }

        .stats-section {
          background: var(--primary-bg);
          border-radius: 12px;
          padding: 1.5rem;
          margin-bottom: 1.5rem;
        }

        .stats-grid {
          display: grid;
          grid-template-columns: repeat(auto-fit, minmax(100px, 1fr));
          gap: 1rem;
          margin-bottom: 1rem;
        }

        .stat-item {
          text-align: center;
          padding: 1rem;
          background: var(--secondary-bg);
          border-radius: 8px;
          border: 1px solid var(--border-light);
        }

        .stat-item.stat-success {
          border-color: var(--accent-success);
          background: rgba(5, 150, 105, 0.05);
        }

        .stat-item.stat-error {
          border-color: var(--accent-danger);
          background: rgba(220, 38, 38, 0.05);
        }

        .stat-value {
          display: block;
          font-size: 1.5rem;
          font-weight: 700;
          color: var(--text-primary);
        }

        .stat-label {
          display: block;
          font-size: 0.875rem;
          color: var(--text-secondary);
          margin-top: 0.25rem;
        }

        .type-breakdown {
          display: flex;
          align-items: center;
          gap: 0.75rem;
          flex-wrap: wrap;
        }

        .breakdown-label {
          font-weight: 600;
          color: var(--text-primary);
        }

        .type-badge {
          padding: 0.25rem 0.75rem;
          border-radius: 20px;
          font-size: 0.75rem;
          font-weight: 600;
          text-transform: uppercase;
        }

        .type-badge.type-ip {
          background: rgba(37, 99, 235, 0.1);
          color: var(--accent-primary);
        }

        .type-badge.type-domain {
          background: rgba(5, 150, 105, 0.1);
          color: var(--accent-success);
        }

        .type-badge.type-url {
          background: rgba(217, 119, 6, 0.1);
          color: var(--accent-warning);
        }

        .type-badge.type-cidr {
          background: rgba(124, 58, 237, 0.1);
          color: var(--accent-purple);
        }

        .validation-section {
          margin-bottom: 2rem;
        }

        .validation-title {
          font-size: 1.1rem;
          font-weight: 600;
          color: var(--text-primary);
          margin-bottom: 1rem;
        }

        .validation-list {
          max-height: 300px;
          overflow-y: auto;
          border: 1px solid var(--border-light);
          border-radius: 8px;
        }

        .validation-item {
          display: flex;
          justify-content: space-between;
          align-items: center;
          padding: 0.75rem 1rem;
          border-bottom: 1px solid var(--border-light);
        }

        .validation-item:last-child {
          border-bottom: none;
        }

        .validation-item.valid {
          background: rgba(5, 150, 105, 0.02);
        }

        .validation-item.invalid {
          background: rgba(220, 38, 38, 0.02);
        }

        .validation-content {
          display: flex;
          align-items: center;
          gap: 1rem;
          flex: 1;
        }

        .target-text {
          font-family: 'JetBrains Mono', monospace;
          font-size: 0.9rem;
          color: var(--text-primary);
        }

        .validation-status {
          display: flex;
          align-items: center;
          gap: 0.5rem;
        }

        .status-icon {
          font-size: 1rem;
        }

        .status-icon.status-success {
          color: var(--accent-success);
        }

        .status-icon.status-error {
          color: var(--accent-danger);
        }

        .error-info {
          display: flex;
          align-items: center;
          gap: 0.5rem;
        }

        .error-message {
          font-size: 0.875rem;
          color: var(--accent-danger);
        }

        .formats-info {
          background: var(--primary-bg);
          border-radius: 12px;
          padding: 1.5rem;
        }

        .formats-title {
          font-size: 1.1rem;
          font-weight: 600;
          color: var(--text-primary);
          margin-bottom: 1rem;
        }

        .formats-grid {
          display: grid;
          grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
          gap: 1rem;
        }

        .format-item {
          display: flex;
          flex-direction: column;
          align-items: center;
          padding: 1rem;
          background: var(--secondary-bg);
          border-radius: 8px;
          border: 1px solid var(--border-light);
          text-align: center;
        }

        .format-icon {
          font-size: 1.5rem;
          color: var(--accent-primary);
          margin-bottom: 0.5rem;
        }

        .format-name {
          font-weight: 600;
          color: var(--text-primary);
          margin-bottom: 0.25rem;
        }

        .format-example {
          font-family: 'JetBrains Mono', monospace;
          font-size: 0.875rem;
          color: var(--text-secondary);
        }

        @media (max-width: 768px) {
          .target-config-panel {
            padding: 1.5rem;
          }

          .input-header {
            flex-direction: column;
            align-items: flex-start;
            gap: 1rem;
          }

          .stats-grid {
            grid-template-columns: repeat(2, 1fr);
          }

          .formats-grid {
            grid-template-columns: 1fr;
          }

          .validation-item {
            flex-direction: column;
            align-items: flex-start;
            gap: 0.5rem;
          }
        }
      `}</style>
    </div>
  );
};

export default TargetConfigPanel;