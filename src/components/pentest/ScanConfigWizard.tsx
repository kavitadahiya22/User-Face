import React, { useState, useCallback, useEffect } from 'react';
import { ScanConfig, Feature } from '../../types/pentest';

interface ScanConfigWizardProps {
  onConfigChange: (config: ScanConfig) => void;
  availableFeatures: Feature[];
  defaultConfig: ScanConfig;
  onNext?: () => void;
  onPrevious?: () => void;
}

interface DepthInfo {
  name: string;
  description: string;
  estimatedTime: string;
  featureCount: number;
  riskLevel: 'low' | 'medium' | 'high';
  icon: string;
  color: string;
}

const ScanConfigWizard: React.FC<ScanConfigWizardProps> = ({
  onConfigChange,
  availableFeatures,
  defaultConfig,
  onNext,
  onPrevious
}) => {
  const [config, setConfig] = useState<ScanConfig>(defaultConfig);
  const [currentStep, setCurrentStep] = useState(0);
  const [showAdvanced, setShowAdvanced] = useState(false);

  const depthOptions: Record<string, DepthInfo> = {
    quick: {
      name: 'Quick Scan',
      description: 'Fast security assessment focusing on common vulnerabilities',
      estimatedTime: '15-30 minutes',
      featureCount: 3,
      riskLevel: 'low',
      icon: 'fas fa-bolt',
      color: 'var(--accent-success)'
    },
    standard: {
      name: 'Standard Scan',
      description: 'Comprehensive security testing with moderate depth',
      estimatedTime: '1-3 hours',
      featureCount: 6,
      riskLevel: 'medium',
      icon: 'fas fa-shield-alt',
      color: 'var(--accent-primary)'
    },
    deep: {
      name: 'Deep Scan',
      description: 'Exhaustive security assessment with advanced techniques',
      estimatedTime: '4-8 hours',
      featureCount: 12,
      riskLevel: 'high',
      icon: 'fas fa-microscope',
      color: 'var(--accent-warning)'
    }
  };

  const steps = [
    { title: 'Scan Depth', description: 'Choose scanning intensity' },
    { title: 'Features', description: 'Select testing modules' },
    { title: 'Configuration', description: 'Advanced settings' },
    { title: 'Review', description: 'Confirm settings' }
  ];

  // Update config when changes are made
  useEffect(() => {
    onConfigChange(config);
  }, [config, onConfigChange]);

  const updateConfig = useCallback((updates: Partial<ScanConfig>) => {
    setConfig(prev => ({ ...prev, ...updates }));
  }, []);

  const handleDepthChange = useCallback((depth: 'quick' | 'standard' | 'deep') => {
    const featuresForDepth = availableFeatures.filter(f => {
      // Filter features based on depth
      if (depth === 'quick') return f.risk_level === 'low';
      if (depth === 'standard') return f.risk_level !== 'high';
      return true; // deep includes all features
    });
    
    updateConfig({
      depth,
      features: featuresForDepth.slice(0, depth === 'quick' ? 2 : depth === 'standard' ? 4 : 6).map(f => f.id)
    });
  }, [updateConfig, availableFeatures]);

  const handleFeatureToggle = useCallback((featureId: string) => {
    setConfig(prev => ({
      ...prev,
      features: prev.features.includes(featureId)
        ? prev.features.filter(id => id !== featureId)
        : [...prev.features, featureId]
    }));
  }, []);

  const calculateRiskAssessment = useCallback(() => {
    const selectedFeatures = availableFeatures.filter(f => config.features.includes(f.id));
    const highRiskFeatures = selectedFeatures.filter(f => f.risk_level === 'high').length;
    const totalTime = selectedFeatures.reduce((sum, f) => sum + (f.estimated_time || 0), 0);
    
    let overallRisk: 'low' | 'medium' | 'high' = 'low';
    if (highRiskFeatures > 2 || !config.simulate) {
      overallRisk = 'high';
    } else if (highRiskFeatures > 0 || config.depth === 'deep') {
      overallRisk = 'medium';
    }

    return {
      overallRisk,
      highRiskFeatures,
      estimatedTime: totalTime,
      selectedFeatures: selectedFeatures.length
    };
  }, [config, availableFeatures]);

  const riskAssessment = calculateRiskAssessment();

  const nextStep = () => {
    if (currentStep < steps.length - 1) {
      setCurrentStep(currentStep + 1);
    } else if (onNext) {
      onNext();
    }
  };

  const previousStep = () => {
    if (currentStep > 0) {
      setCurrentStep(currentStep - 1);
    } else if (onPrevious) {
      onPrevious();
    }
  };

  const renderStepContent = () => {
    switch (currentStep) {
      case 0: // Scan Depth
        return (
          <div className="step-content">
            <h3 className="step-title">Choose Scan Depth</h3>
            <p className="step-description">
              Select the scanning intensity based on your security requirements and available time.
            </p>
            
            <div className="depth-options">
              {Object.entries(depthOptions).map(([key, option]) => (
                <div
                  key={key}
                  className={`depth-option ${config.depth === key ? 'selected' : ''}`}
                  onClick={() => handleDepthChange(key as any)}
                >
                  <div className="depth-header">
                    <i className={option.icon} style={{ color: option.color }}></i>
                    <h4 className="depth-name">{option.name}</h4>
                    <span className={`risk-badge risk-${option.riskLevel}`}>
                      {option.riskLevel.toUpperCase()}
                    </span>
                  </div>
                  <p className="depth-description">{option.description}</p>
                  <div className="depth-details">
                    <span className="detail-item">
                      <i className="fas fa-clock"></i>
                      {option.estimatedTime}
                    </span>
                    <span className="detail-item">
                      <i className="fas fa-list"></i>
                      {option.featureCount} features
                    </span>
                  </div>
                </div>
              ))}
            </div>
          </div>
        );

      case 1: // Features
        const availableFeaturesForDepth = availableFeatures.filter(f => {
          if (config.depth === 'quick') return f.risk_level === 'low';
          if (config.depth === 'standard') return f.risk_level !== 'high';
          return true; // deep includes all features
        });
        return (
          <div className="step-content">
            <h3 className="step-title">Select Features</h3>
            <p className="step-description">
              Choose the testing modules to include in your penetration test.
            </p>

            <div className="features-grid">
              {availableFeaturesForDepth.map(feature => (
                <div
                  key={feature.id}
                  className={`feature-card ${config.features.includes(feature.id) ? 'selected' : ''}`}
                  onClick={() => handleFeatureToggle(feature.id)}
                >
                  <div className="feature-header">
                    <div className="feature-info">
                      <h4 className="feature-name">{feature.name}</h4>
                      <span className="feature-category">{feature.category}</span>
                    </div>
                    <div className="feature-meta">
                      <span className={`risk-indicator risk-${feature.risk_level}`}>
                        {feature.risk_level.toUpperCase()}
                      </span>
                      {feature.estimated_time && (
                        <span className="time-indicator">
                          <i className="fas fa-clock"></i>
                          {feature.estimated_time}m
                        </span>
                      )}
                    </div>
                  </div>
                  <p className="feature-description">{feature.description}</p>
                  {feature.destructive && (
                    <div className="destructive-warning">
                      <i className="fas fa-exclamation-triangle"></i>
                      May cause service disruption
                    </div>
                  )}
                  <div className="feature-checkbox">
                    <input
                      type="checkbox"
                      checked={config.features.includes(feature.id)}
                      onChange={() => handleFeatureToggle(feature.id)}
                      onClick={(e) => e.stopPropagation()}
                    />
                  </div>
                </div>
              ))}
            </div>
          </div>
        );

      case 2: // Configuration
        return (
          <div className="step-content">
            <h3 className="step-title">Advanced Configuration</h3>
            <p className="step-description">
              Configure advanced settings and constraints for your penetration test.
            </p>

            <div className="config-sections">
              {/* Simulation Mode */}
              <div className="config-section">
                <h4 className="config-section-title">Testing Mode</h4>
                <div className="mode-options">
                  <label className={`mode-option ${config.simulate ? 'selected' : ''}`}>
                    <input
                      type="radio"
                      name="mode"
                      checked={config.simulate}
                      onChange={() => updateConfig({ simulate: true })}
                    />
                    <div className="mode-content">
                      <i className="fas fa-shield-alt mode-icon"></i>
                      <div>
                        <h5>Simulation Mode</h5>
                        <p>Safe testing without exploitation</p>
                      </div>
                    </div>
                  </label>
                  <label className={`mode-option ${!config.simulate ? 'selected' : ''}`}>
                    <input
                      type="radio"
                      name="mode"
                      checked={!config.simulate}
                      onChange={() => updateConfig({ simulate: false })}
                    />
                    <div className="mode-content">
                      <i className="fas fa-crosshairs mode-icon"></i>
                      <div>
                        <h5>Live Testing</h5>
                        <p>Real exploitation attempts</p>
                      </div>
                    </div>
                  </label>
                </div>
              </div>

              {/* Advanced Settings Toggle */}
              <div className="config-section">
                <h4 className="config-section-title">
                  <button
                    type="button"
                    className="advanced-toggle"
                    onClick={() => setShowAdvanced(!showAdvanced)}
                  >
                    <i className={`fas fa-chevron-${showAdvanced ? 'down' : 'right'}`}></i>
                    Advanced Settings
                  </button>
                </h4>

                {showAdvanced && (
                  <div className="advanced-settings">
                    {/* Constraints */}
                    <div className="setting-group">
                      <h5>Testing Constraints</h5>
                      <label className="checkbox-label">
                        <input
                          type="checkbox"
                          checked={config.constraints?.exclude_destructive || false}
                          onChange={(e) => updateConfig({
                            constraints: {
                              exclude_destructive: e.target.checked,
                              rate_limiting: config.constraints?.rate_limiting || false,
                              stealth_mode: config.constraints?.stealth_mode || false,
                            }
                          })}
                        />
                        Exclude destructive tests
                      </label>
                      <label className="checkbox-label">
                        <input
                          type="checkbox"
                          checked={config.constraints?.rate_limiting || false}
                          onChange={(e) => updateConfig({
                            constraints: {
                              exclude_destructive: config.constraints?.exclude_destructive || false,
                              rate_limiting: e.target.checked,
                              stealth_mode: config.constraints?.stealth_mode || false,
                            }
                          })}
                        />
                        Enable rate limiting
                      </label>
                      <label className="checkbox-label">
                        <input
                          type="checkbox"
                          checked={config.constraints?.stealth_mode || false}
                          onChange={(e) => updateConfig({
                            constraints: {
                              exclude_destructive: config.constraints?.exclude_destructive || false,
                              rate_limiting: config.constraints?.rate_limiting || false,
                              stealth_mode: e.target.checked,
                            }
                          })}
                        />
                        Stealth mode
                      </label>
                    </div>

                    {/* Scheduling */}
                    <div className="setting-group">
                      <h5>Scheduling Options</h5>
                      <label className="checkbox-label">
                        <input
                          type="checkbox"
                          checked={config.scheduling?.business_hours_only || false}
                          onChange={(e) => updateConfig({
                            scheduling: {
                              ...config.scheduling,
                              business_hours_only: e.target.checked,
                              start_time: config.scheduling?.start_time || new Date().toISOString(),
                              max_duration: config.scheduling?.max_duration || 480
                            }
                          })}
                        />
                        Business hours only
                      </label>
                      
                      <div className="input-group">
                        <label>Maximum Duration (minutes)</label>
                        <input
                          type="number"
                          min="30"
                          max="1440"
                          value={config.scheduling?.max_duration || 480}
                          onChange={(e) => updateConfig({
                            scheduling: {
                              ...config.scheduling,
                              max_duration: parseInt(e.target.value),
                              start_time: config.scheduling?.start_time || new Date().toISOString(),
                              business_hours_only: config.scheduling?.business_hours_only || false
                            }
                          })}
                        />
                      </div>
                    </div>
                  </div>
                )}
              </div>
            </div>
          </div>
        );

      case 3: // Review
        return (
          <div className="step-content">
            <h3 className="step-title">Configuration Review</h3>
            <p className="step-description">
              Review your penetration testing configuration before proceeding.
            </p>

            <div className="review-sections">
              {/* Risk Assessment */}
              <div className="review-section risk-assessment">
                <h4 className="review-section-title">Risk Assessment</h4>
                <div className="risk-summary">
                  <div className={`risk-level risk-${riskAssessment.overallRisk}`}>
                    <i className="fas fa-exclamation-triangle"></i>
                    <span>Overall Risk: {riskAssessment.overallRisk.toUpperCase()}</span>
                  </div>
                  <div className="risk-details">
                    <span>High-risk features: {riskAssessment.highRiskFeatures}</span>
                    <span>Estimated time: {riskAssessment.estimatedTime} minutes</span>
                    <span>Selected features: {riskAssessment.selectedFeatures}</span>
                  </div>
                </div>
              </div>

              {/* Configuration Summary */}
              <div className="review-section">
                <h4 className="review-section-title">Configuration Summary</h4>
                <div className="config-summary">
                  <div className="summary-item">
                    <strong>Scan Depth:</strong> {depthOptions[config.depth].name}
                  </div>
                  <div className="summary-item">
                    <strong>Testing Mode:</strong> {config.simulate ? 'Simulation' : 'Live Testing'}
                  </div>
                  <div className="summary-item">
                    <strong>Features:</strong> {config.features.length} selected
                  </div>
                  {config.constraints && Object.values(config.constraints).some(Boolean) && (
                    <div className="summary-item">
                      <strong>Constraints:</strong>
                      <ul className="constraints-list">
                        {config.constraints.exclude_destructive && <li>Exclude destructive tests</li>}
                        {config.constraints.rate_limiting && <li>Rate limiting enabled</li>}
                        {config.constraints.stealth_mode && <li>Stealth mode enabled</li>}
                      </ul>
                    </div>
                  )}
                </div>
              </div>

              {/* Safety Warnings */}
              {(!config.simulate || riskAssessment.overallRisk === 'high') && (
                <div className="review-section safety-warnings">
                  <h4 className="review-section-title">
                    <i className="fas fa-exclamation-triangle"></i>
                    Safety Warnings
                  </h4>
                  <div className="warnings-list">
                    {!config.simulate && (
                      <div className="warning-item">
                        <i className="fas fa-exclamation-circle"></i>
                        Live testing mode may cause service disruption
                      </div>
                    )}
                    {riskAssessment.highRiskFeatures > 0 && (
                      <div className="warning-item">
                        <i className="fas fa-exclamation-circle"></i>
                        {riskAssessment.highRiskFeatures} high-risk features selected
                      </div>
                    )}
                    {config.depth === 'deep' && (
                      <div className="warning-item">
                        <i className="fas fa-exclamation-circle"></i>
                        Deep scan may take several hours to complete
                      </div>
                    )}
                  </div>
                </div>
              )}
            </div>
          </div>
        );

      default:
        return <div>Invalid step</div>;
    }
  };

  return (
    <div className="scan-config-wizard">
      {/* Progress Steps */}
      <div className="wizard-header">
        <div className="steps-progress">
          {steps.map((step, index) => (
            <div
              key={index}
              className={`step-indicator ${
                index === currentStep ? 'current' : 
                index < currentStep ? 'completed' : 'pending'
              }`}
              onClick={() => setCurrentStep(index)}
            >
              <div className="step-number">
                {index < currentStep ? <i className="fas fa-check"></i> : index + 1}
              </div>
              <div className="step-info">
                <span className="step-name">{step.title}</span>
                <span className="step-desc">{step.description}</span>
              </div>
            </div>
          ))}
        </div>
      </div>

      {/* Step Content */}
      <div className="wizard-content">
        {renderStepContent()}
      </div>

      {/* Navigation */}
      <div className="wizard-footer">
        <button
          type="button"
          onClick={previousStep}
          className="btn-secondary"
          disabled={currentStep === 0}
        >
          <i className="fas fa-chevron-left"></i>
          Previous
        </button>
        <button
          type="button"
          onClick={nextStep}
          className="btn-primary"
        >
          {currentStep === steps.length - 1 ? 'Generate Plan' : 'Next'}
          <i className="fas fa-chevron-right"></i>
        </button>
      </div>

      <style>{`
        .scan-config-wizard {
          background: var(--card-bg);
          border-radius: 16px;
          overflow: hidden;
          box-shadow: var(--shadow-lg);
          border: 1px solid var(--border-color);
        }

        .wizard-header {
          background: var(--primary-bg);
          padding: 2rem;
          border-bottom: 1px solid var(--border-light);
        }

        .steps-progress {
          display: flex;
          justify-content: space-between;
          gap: 1rem;
        }

        .step-indicator {
          display: flex;
          align-items: center;
          gap: 1rem;
          flex: 1;
          cursor: pointer;
          transition: all 0.3s ease;
        }

        .step-indicator.completed .step-number {
          background: var(--accent-success);
          color: white;
        }

        .step-indicator.current .step-number {
          background: var(--accent-primary);
          color: white;
        }

        .step-indicator.pending .step-number {
          background: var(--border-light);
          color: var(--text-muted);
        }

        .step-number {
          width: 40px;
          height: 40px;
          border-radius: 50%;
          display: flex;
          align-items: center;
          justify-content: center;
          font-weight: 600;
          flex-shrink: 0;
        }

        .step-info {
          display: flex;
          flex-direction: column;
        }

        .step-name {
          font-weight: 600;
          color: var(--text-primary);
        }

        .step-desc {
          font-size: 0.875rem;
          color: var(--text-secondary);
        }

        .wizard-content {
          padding: 2rem;
        }

        .step-content {
          min-height: 500px;
        }

        .step-title {
          font-size: 1.5rem;
          font-weight: 700;
          color: var(--text-primary);
          margin-bottom: 0.5rem;
        }

        .step-description {
          color: var(--text-secondary);
          margin-bottom: 2rem;
          line-height: 1.6;
        }

        /* Depth Options */
        .depth-options {
          display: grid;
          gap: 1.5rem;
        }

        .depth-option {
          padding: 1.5rem;
          border: 2px solid var(--border-light);
          border-radius: 12px;
          cursor: pointer;
          transition: all 0.3s ease;
        }

        .depth-option:hover {
          border-color: var(--accent-primary);
          transform: translateY(-2px);
          box-shadow: var(--shadow-md);
        }

        .depth-option.selected {
          border-color: var(--accent-primary);
          background: rgba(37, 99, 235, 0.05);
        }

        .depth-header {
          display: flex;
          align-items: center;
          gap: 1rem;
          margin-bottom: 1rem;
        }

        .depth-header i {
          font-size: 1.5rem;
        }

        .depth-name {
          font-size: 1.25rem;
          font-weight: 600;
          color: var(--text-primary);
          flex: 1;
        }

        .risk-badge {
          padding: 0.25rem 0.75rem;
          border-radius: 20px;
          font-size: 0.75rem;
          font-weight: 600;
        }

        .risk-badge.risk-low {
          background: rgba(5, 150, 105, 0.1);
          color: var(--accent-success);
        }

        .risk-badge.risk-medium {
          background: rgba(217, 119, 6, 0.1);
          color: var(--accent-warning);
        }

        .risk-badge.risk-high {
          background: rgba(220, 38, 38, 0.1);
          color: var(--accent-danger);
        }

        .depth-description {
          color: var(--text-secondary);
          margin-bottom: 1rem;
          line-height: 1.5;
        }

        .depth-details {
          display: flex;
          gap: 1.5rem;
        }

        .detail-item {
          display: flex;
          align-items: center;
          gap: 0.5rem;
          color: var(--text-muted);
          font-size: 0.875rem;
        }

        /* Features Grid */
        .features-grid {
          display: grid;
          grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
          gap: 1rem;
        }

        .feature-card {
          position: relative;
          padding: 1.5rem;
          border: 2px solid var(--border-light);
          border-radius: 12px;
          cursor: pointer;
          transition: all 0.3s ease;
        }

        .feature-card:hover {
          border-color: var(--accent-primary);
          transform: translateY(-2px);
          box-shadow: var(--shadow-md);
        }

        .feature-card.selected {
          border-color: var(--accent-primary);
          background: rgba(37, 99, 235, 0.05);
        }

        .feature-header {
          display: flex;
          justify-content: space-between;
          align-items: flex-start;
          margin-bottom: 1rem;
        }

        .feature-info {
          flex: 1;
        }

        .feature-name {
          font-size: 1.1rem;
          font-weight: 600;
          color: var(--text-primary);
          margin-bottom: 0.25rem;
        }

        .feature-category {
          color: var(--text-muted);
          font-size: 0.875rem;
        }

        .feature-meta {
          display: flex;
          flex-direction: column;
          gap: 0.5rem;
          align-items: flex-end;
        }

        .risk-indicator {
          padding: 0.125rem 0.5rem;
          border-radius: 12px;
          font-size: 0.75rem;
          font-weight: 600;
        }

        .time-indicator {
          display: flex;
          align-items: center;
          gap: 0.25rem;
          color: var(--text-muted);
          font-size: 0.875rem;
        }

        .feature-description {
          color: var(--text-secondary);
          line-height: 1.5;
          margin-bottom: 1rem;
        }

        .destructive-warning {
          display: flex;
          align-items: center;
          gap: 0.5rem;
          color: var(--accent-danger);
          font-size: 0.875rem;
          background: rgba(220, 38, 38, 0.1);
          padding: 0.5rem;
          border-radius: 6px;
          margin-bottom: 1rem;
        }

        .feature-checkbox {
          position: absolute;
          top: 1rem;
          right: 1rem;
        }

        .feature-checkbox input[type="checkbox"] {
          width: 18px;
          height: 18px;
          accent-color: var(--accent-primary);
        }

        /* Configuration Sections */
        .config-sections {
          display: flex;
          flex-direction: column;
          gap: 2rem;
        }

        .config-section {
          background: var(--primary-bg);
          padding: 1.5rem;
          border-radius: 12px;
          border: 1px solid var(--border-light);
        }

        .config-section-title {
          font-size: 1.1rem;
          font-weight: 600;
          color: var(--text-primary);
          margin-bottom: 1rem;
        }

        .advanced-toggle {
          background: none;
          border: none;
          color: var(--text-primary);
          cursor: pointer;
          display: flex;
          align-items: center;
          gap: 0.5rem;
          font-size: 1.1rem;
          font-weight: 600;
        }

        .mode-options {
          display: grid;
          grid-template-columns: 1fr 1fr;
          gap: 1rem;
        }

        .mode-option {
          padding: 1rem;
          border: 2px solid var(--border-light);
          border-radius: 8px;
          cursor: pointer;
          transition: all 0.3s ease;
        }

        .mode-option:hover {
          border-color: var(--accent-primary);
        }

        .mode-option.selected {
          border-color: var(--accent-primary);
          background: rgba(37, 99, 235, 0.05);
        }

        .mode-option input[type="radio"] {
          display: none;
        }

        .mode-content {
          display: flex;
          align-items: center;
          gap: 1rem;
        }

        .mode-icon {
          font-size: 1.5rem;
          color: var(--accent-primary);
        }

        .mode-content h5 {
          font-weight: 600;
          color: var(--text-primary);
          margin-bottom: 0.25rem;
        }

        .mode-content p {
          color: var(--text-secondary);
          font-size: 0.875rem;
        }

        .advanced-settings {
          margin-top: 1rem;
          padding-top: 1rem;
          border-top: 1px solid var(--border-light);
        }

        .setting-group {
          margin-bottom: 1.5rem;
        }

        .setting-group h5 {
          font-weight: 600;
          color: var(--text-primary);
          margin-bottom: 0.75rem;
        }

        .checkbox-label {
          display: flex;
          align-items: center;
          gap: 0.5rem;
          margin-bottom: 0.5rem;
          cursor: pointer;
          color: var(--text-primary);
        }

        .input-group {
          margin-top: 1rem;
        }

        .input-group label {
          display: block;
          font-weight: 500;
          color: var(--text-primary);
          margin-bottom: 0.5rem;
        }

        .input-group input {
          width: 100%;
          padding: 0.75rem;
          border: 1px solid var(--border-color);
          border-radius: 6px;
          background: var(--secondary-bg);
          color: var(--text-primary);
        }

        /* Review Sections */
        .review-sections {
          display: flex;
          flex-direction: column;
          gap: 1.5rem;
        }

        .review-section {
          background: var(--primary-bg);
          padding: 1.5rem;
          border-radius: 12px;
          border: 1px solid var(--border-light);
        }

        .review-section.risk-assessment {
          border-color: var(--accent-warning);
        }

        .review-section.safety-warnings {
          border-color: var(--accent-danger);
          background: rgba(220, 38, 38, 0.02);
        }

        .review-section-title {
          font-size: 1.1rem;
          font-weight: 600;
          color: var(--text-primary);
          margin-bottom: 1rem;
          display: flex;
          align-items: center;
          gap: 0.5rem;
        }

        .risk-summary {
          display: flex;
          flex-direction: column;
          gap: 1rem;
        }

        .risk-level {
          display: flex;
          align-items: center;
          gap: 0.5rem;
          padding: 0.75rem;
          border-radius: 8px;
          font-weight: 600;
        }

        .risk-level.risk-low {
          background: rgba(5, 150, 105, 0.1);
          color: var(--accent-success);
        }

        .risk-level.risk-medium {
          background: rgba(217, 119, 6, 0.1);
          color: var(--accent-warning);
        }

        .risk-level.risk-high {
          background: rgba(220, 38, 38, 0.1);
          color: var(--accent-danger);
        }

        .risk-details {
          display: flex;
          flex-wrap: wrap;
          gap: 1rem;
          color: var(--text-secondary);
          font-size: 0.875rem;
        }

        .config-summary {
          display: flex;
          flex-direction: column;
          gap: 0.75rem;
        }

        .summary-item {
          color: var(--text-primary);
        }

        .constraints-list {
          margin-top: 0.5rem;
          margin-left: 1rem;
          color: var(--text-secondary);
        }

        .warnings-list {
          display: flex;
          flex-direction: column;
          gap: 0.75rem;
        }

        .warning-item {
          display: flex;
          align-items: center;
          gap: 0.5rem;
          color: var(--accent-danger);
          background: rgba(220, 38, 38, 0.1);
          padding: 0.75rem;
          border-radius: 6px;
        }

        .wizard-footer {
          display: flex;
          justify-content: space-between;
          padding: 1.5rem 2rem;
          background: var(--primary-bg);
          border-top: 1px solid var(--border-light);
        }

        .btn-primary, .btn-secondary {
          display: flex;
          align-items: center;
          gap: 0.5rem;
          padding: 0.75rem 1.5rem;
          border-radius: 8px;
          font-weight: 600;
          cursor: pointer;
          transition: all 0.3s ease;
          border: none;
        }

        .btn-primary {
          background: var(--accent-primary);
          color: white;
        }

        .btn-primary:hover {
          background: var(--accent-secondary);
          transform: translateY(-1px);
        }

        .btn-secondary {
          background: var(--border-light);
          color: var(--text-primary);
        }

        .btn-secondary:hover {
          background: var(--border-color);
        }

        .btn-secondary:disabled {
          opacity: 0.5;
          cursor: not-allowed;
        }

        @media (max-width: 768px) {
          .scan-config-wizard {
            margin: 0;
            border-radius: 0;
          }

          .wizard-header, .wizard-content, .wizard-footer {
            padding: 1rem;
          }

          .steps-progress {
            flex-direction: column;
            gap: 1rem;
          }

          .mode-options {
            grid-template-columns: 1fr;
          }

          .features-grid {
            grid-template-columns: 1fr;
          }

          .wizard-footer {
            flex-direction: column;
            gap: 1rem;
          }
        }
      `}</style>
    </div>
  );
};

export default ScanConfigWizard;